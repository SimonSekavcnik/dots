#+TITLE: Simon's GNU Emacs Configuration 
#+author: Simon Sekavčnik
#+STARTUP: overview
#+date: [2023-10-10 pet 00:11]
#+lastmod: [2023-08-13 ned 17:05]
#+hugo_base_dir: ~/Blog/
#+hugo_custom_front_matter: :url emacs-config
#+hugo_custom_front_matter: :featured false
#+hugo_custom_front_matter: :summary My Emacs Config
#+filetags: emacs:dots

This is my emacs configuration. Do with is as you will. This configuration is a
work in progress, so anything can break at any point. You can also find this
file in my [[https://github.com/SimonSekavcnik/dots][dots]].

* PACKAGE MANAGEMENT
Configuration for Elpaca [[https://github.com/progfolio/elpaca][An Elisp Package Manager]]:
#+begin_src emacs-lisp :results none
(defvar elpaca-installer-version 0.4)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (kill-buffer buffer)
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src
* GENERAL BEHAVIOUR
** Evil Mode
I like vim key bindings: [[https://github.com/emacs-evil/evil][EVIL]]
#+begin_src emacs-lisp :results none
  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))
  (elpaca-wait)


  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-i-jump nil)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collecion-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  ;;Turns off elpaca-use-package-mode current declartion
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.

  (use-package evil-leader
    :ensure t
    :config
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key-for-mode 'normal "t" 'hydra-toggle/body))
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))
#+end_src

** General
#+begin_src emacs-lisp :results none
  (require 'ido)
  (ido-mode t)
  (use-package general
    :config
    (general-evil-setup t)
    (defconst my-leader "SPC")
    (general-create-definer my-leader-def
        :prefix my-leader)
    (general-override-mode)
    (general-define-key
     :states '(normal visual)
     :prefix "SPC"
     "f p" '(lambda () (interactive) (find-file "~/.config/emacs/config.org") :which-key "Open config.org")
     "f h" '(lambda () (interactive) (find-file "~/.config/hypr/hyprland.conf") :which-key "Open hyprland config")
     "." '(find-file :which-key "Find File")
     ;; BUFFER MANIPULATION
     "t t" '(toggle-solarized-theme :which-key "Toggle theme")
     "h" '(evil-window-left       :which-key "Move Left")
     "j" '(evil-window-down       :which-key "Move Down")
     "k" '(evil-window-up         :which-key "Move Up")
     "l" '(evil-window-right      :which-key "Move Right")
     "n j" '(split-window-below   :which-key "Split Below")
     "n l" '(split-window-right   :which-key "Split Right")
     "x" '(org-capture            :which-key "Org Capture")
     "b i" '(ibuffer              :which-key "IBuffer")
     "o B" '(bookmark-set         :which-key "Set Bookmark")
     "o m" '(mu4e                 :which-key "Open Email")
     "o a" '(org-agenda           :which-key "Org Agenda")
     "o b" '(bookmark-bmenu-list  :which-key "List Bookmarks")))
#+end_src

** Hydra
Sticky bindings: [[https://github.com/abo-abo/hydra][Hydra]]
#+begin_src emacs-lisp :results none
  (use-package hydra
    :ensure t)
#+end_src

** Avy
Jumping around the buffer: [[https://github.com/abo-abo/avy][avy]]
#+begin_src emacs-lisp :results none
  (use-package avy
    :ensure t
    :config
    (defhydra hydra-avy (:color blue :hint nil)
      "
                Avy Goto
                ^Char^   ^Line^   ^Word^  Description
                ^^^^^——————————————————————————————————————-
                [_c_]    [_l_]    [_w_]   Jump To
                [_C_]    [_L_]    [_W_]   Go To
      "
      ("c" avy-goto-char)
      ("l" avy-goto-line)
      ("w" avy-goto-word-0)
      ("C" avy-goto-char-2)
      ("L" avy-goto-line-above)
      ("W" avy-goto-word-1)
      ("q" nil :exit t))
    (general-override-mode)
    (general-define-key
     :prefix "SPC"
     :states '(motion normal visual)
     :keymaps 'override
     "a" '(hydra-avy/body :which-key "Avy")))
#+end_src

** Ivy
#+begin_src emacs-lisp :results none
(use-package ivy
  :ensure t
  :config
  (ivy-mode 1))

(use-package counsel
  :ensure t)

(use-package swiper
  :ensure t)

#+end_src
** Tabs
** Spell Checking
#+begin_src emacs-lisp :results non
  (setq ispell-program-name "hunspell")
  (setq ispell-program-name (executable-find "hunspell"))
  (setq ispell-local-dictionary "en_US")
#+end_src

** External Programs
#+begin_src emacs-lisp :results none
(use-package openwith
  :config
  (openwith-mode t)
  (setq openwith-associations '(("\\.pdf\\'" "evince" (file))))

  ;; Open PDF files externally
  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . openwith-open-pdf-externally)))
#+end_src

** Neo
#+begin_src emacs-lisp :results none
   (use-package neotree
     :ensure t
     :config
     (add-hook 'neo-after-create-hook
             (lambda (_)
               (setq-local display-line-numbers nil)))
     (defhydra hydra-neotree (:color blue :hint nil)

       "
              NeoTree Commands
              ^Navigation^   ^Actions^     ^Toggle^        ^Misc^
              ^^^^^^^^—————————————————————————————————————————
              [_n_] Next Line   [_C_] Create   [_t_] Tree      [_r_] Refresh
              [_p_] Prev Line   [_D_] Delete   [_h_] Hidden    [_s_] Change Root
              [_q_] Quit
       "
       ("n" neotree-next-line)
       ("p" neotree-previous-line)
       ("C" neotree-create-node)
       ("D" neotree-delete-node)
       ("t" neotree-toggle)
       ("h" neotree-hidden-file-toggle :which-key "Toggle Hidden Files")
       ("s" neotree-change-root)
       ("r" neotree-refresh)
       ("q" nil :exit t))
     (general-override-mode)
     (general-define-key
      :prefix "SPC"
      :states '(motion normal visual)
      :keymaps 'override
      "o" '(hydra-neotree/body :which-key "NeoTree")))
#+end_src
* APPEARANCE
** Theme
Using the Solaized theme
#+begin_src emacs-lisp :results none

  (use-package solarized-theme
    :config
    (load-theme 'solarized-dark t)) ; Choose 'solarized-light' for light theme
#+end_src

A function to change the theme
#+begin_src emacs-lisp :results none
  (defun toggle-solarized-theme ()
    "Toggle between 'solarized-dark' and 'solarized-light' themes."
    (interactive)
    (if (eq (car custom-enabled-themes) 'solarized-dark)
        (progn
          (disable-theme 'solarized-dark)
          (load-theme 'solarized-light t))
      (progn
        (disable-theme 'solarized-light)
        (load-theme 'solarized-dark t))))
#+end_src


#+begin_src emacs-lisp :results none
(setq org-src-fontify-natively t)
#+end_src

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp :results none
  (set-frame-font "Fira Code")
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

#+end_src

** Display Line Numbers and Truncate lines
#+begin_src emacs-lisp :results none
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Initial Screen

#+begin_src emacs-lisp :results none
  (use-package dashboard
    :elpaca t
    :config
    (add-hook 'elpaca-after-init-hook #'dashboard-insert-startupify-lists)
    (add-hook 'elpaca-after-init-hook #'dashboard-initialize)
    (dashboard-setup-startup-hook))

  (setq dashboard-icon-type 'all-the-icons)
  ;; Set the title
  (setq dashboard-banner-logo-title "Simon's Emacs")
  ;; Set the banner
  ;;(setq dashboard-startup-banner [VALUE])
  ;; Value can be
  ;; - nil to display no banner
  ;; - 'official which displays the official emacs logo
  ;; - 'logo which displays an alternative emacs logo
  ;; - 1, 2 or 3 which displays one of the text banners
  ;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
  ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

  ;; Content is not centered by default. To center, set
  (setq dashboard-center-content t)

  ;; To disable shortcut "jump" indicators for each section, set
  (setq dashboard-show-shortcuts nil)
#+end_src

* MODES
** IBuffer
#+begin_src emacs-lisp :results none
;;; emacs/ibuffer/config.el -*- lexical-binding: t; -*-

#+end_src
** Org Mode 
Org mode configuration
#+begin_src emacs-lisp :results none
  ;; Enable automatic line wrapping in org mode
  (setq org-tags-column 80)
  (setq org-indent-indentation-per-level 5)
  (setq org-ellipsis "⤵")
  (add-hook 'org-mode-hook
                (lambda ()
                  (setq fill-column 80) ; Set the desired line width
                  (turn-on-auto-fill)))

      ;; Configure visual line mode for org mode
      (add-hook 'org-mode-hook 'visual-line-mode)
      (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1)))
        (add-to-list 'org-structure-template-alist
                     '("s" "#+NAME: ?\n#+BEGIN_SRC \n\n#+END_SRC"))
        (setq org-confirm-babel-evaluate nil)


        (defun org-icons ()
          "Beautify org mode keywords."
          (setq prettify-symbols-alist '(
                                         ("[#A]" . "")
                                         ("[#B]" . "")
                                         ("[#C]" . "")
                                         ("[ ]" . "")
                                         ("[X]" . "")
                                         ("[-]" . "")
                                         ("#+BEGIN_SRC" . "")
                                         ("#+END_SRC" . "")
                                         ("#+begin_src" . "")
                                         ("#+end_src" . "")
                                         (":ATTENDEES:" . "")
                                         (":AUTHORS:" . "")
                                         (":authors:" . "")
                                         (":PROPERTIES:" . "")
                                         ("#+OPTIONS" . "")
                                         (":END:" . "―")
                                         ("#+STARTUP:" . "")
                                         ("#+TITLE: " . "")
                                         ("#+title: " . "")
                                         ("#+RESULTS:" . "")
                                         ("#+DESCRIPTION:" . "")
                                         ("#+NAME:" . "")
                                         ("#+ROAM_TAGS:" . "")
                                         ("#+FILETAGS:" . "")
                                         (":FILETAGS:" . "")
                                         ("#+HTML_HEAD:" . "")
                                         ("#+hugo_custom_front_matter:" . "")
                                         ("#+AUTHOR:" . "")
                                         ("#+author:" . "")
                                         ("#+SUBTITLE:" . "")
                                         (":EFFORT:" . "")
                                         (":COMPLETED:" . "")
                                         (":SCHEDULED:" . "")
                                         (":URL:" . "")
                                         (":HEART:" . "")
                                         (":PHONE:" . "")
                                         (":EMAIL:" . "")
                                         (":ADDRESS:" . "")
                                         (":PERSON:" . "")
                                         ("ACADEMIC" . "")
                                         (":DEADLINE:" . "")))




          (prettify-symbols-mode))
        (add-hook 'org-mode-hook #'org-icons)

        (use-package org-superstar
          :config
          (setq org-superstar-special-todo-items t)
          (add-hook 'org-mode-hook (lambda ()
                                     (org-superstar-mode 1))))
        (defface my-ligature-face
          '((t (:family "Fira Code" :height 1.0))) ;; Replace "Fira Code" with the name of your desired font
          "Face for ligature"
          :group 'org-faces)

        (use-package org-appear
          :hook (org-mode . org-appear-mode))
        (setq org-startup-indented t
              org-pretty-entities t
              org-hide-emphasis-markers t
              org-startup-with-inline-images t
              org-image-actual-width '(300))
        (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
        ;; Configure org-mode to open links in the same buffer
        (setq org-return-follows-link t)


        (defun my-org-mode-keys ()
          (when (bound-and-true-p evil-local-mode)
            (evil-define-key 'normal org-mode-map (kbd "RET") 'org-open-at-point)))

        (add-hook 'org-mode-hook 'my-org-mode-keys)

        ;; Configure evil-mode to open links in the same buffer

    (setq org-structure-template-alist
      '(("c" . "comment\n")
        ("e" . "example\n")
        ("E" . "export")
        ("h" . "export html\n")
        ("l" . "export latex\n")
        ("q" . "quote\n")
        ("s" . "src")
        ("se" . "src emacs-lisp\n")
        ("v" . "verse\n")))
  (use-package org-sticky-header
    :ensure t
    :hook (org-mode . org-sticky-header-mode)
    :config
    (setq org-sticky-header-full-path 'full
          org-sticky-header-outline-path 'breadcrumb))


#+end_src

#+begin_src emacs-lisp :results none
  (setq org-cite-activate-plain-format "\\cite{%l}")
  (add-to-list 'load-path "~/.config/emacs/site-lisp")
  (load "~/.config/emacs/site-lisp/org-pretty-table.el")
  (add-hook 'org-mode-hook #'org-pretty-table-mode)
#+end_src

*** Org-clock
#+begin_src emacs-lisp :results none
    (setq org-clock-clocktable-default-properties
          '(:maxlevel 3
            :scope file
            :block today
            :tstart "<today>"
            :tend "<tomorrow>"
            :stepskip0 t
            :step nil
            :step-width 1
            :properties ("CATEGORY")
            :fileskip0 nil
            :hidefiles t
            :emphasize nil
            :link t
            :narrow 40
            :indent nil
            :formula nil
            :timestamp nil
            :formula-formula nil
            :link-fmt "[[%s][%s]]"
            :block-fmt ""
            :properties-fmt ""
            :tags nil
            :tags-fmt nil
            :narrow-fmt ""
            :clock-summaries nil
            :fileskip0summary nil
            :compact nil
            :compact-fmt ""
            :sort nil
            :sort-fmt ""
            :show-properties nil
            :level nil
            :level-fmt ""
            :scope-agenda-text ""
            :table-line-above "--"
            :table-line-below "--"))
#+end_src
*** Babel
Install the ~org-contrib~ packge to get more languages
#+begin_src emacs-lisp :results none
(use-package org-contrib
  :ensure t)
#+end_src
#+begin_src emacs-lisp :results none
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     ))
  (setq org-confirm-babel-evaluate nil)
#+end_src
*** Darkroom mode
#+begin_src emacs-lisp :results none
  (use-package darkroom
    :ensure t
    :config
    (setq darkroom-margins 0.2) ; Adjust the margin size to your preference
    (setq darkroom-fringes-outside-margins t) ; Set to t if you want fringes outside the margins
    (setq darkroom-mode-line 'light) ; Use 'light for a light mode-line
    (setq darkroom-text-scale-increase 2) ; Set to the desired text scale increase
    :bind
    ("<f12>" . darkroom-tentative-mode) ; Bind to a keybinding of your choice
    :hook
    (darkroom-mode . (lambda ()
                       (if darkroom-mode
                           (display-line-numbers-mode -1)
                         (display-line-numbers-mode 1)))
                   )
    )
#+end_src

** Org Roam
+ Configuration for Org-roam
  #+begin_src emacs-lisp :results none
    (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/.roam")
      :config
      (setq org-roam-node-display-template "${title:200} ${tags:200}")
      (org-roam-db-autosync-enable)
      (defhydra my-org-roam-hydra (:color blue :hint nil)
        "
                  ^Roam^                ^Capture^        ^Dailies^       ^Cite^
                  ^────^──────────────  ^──────^───────  ^———————^—————  ^————^——————————————
                  _g_: Goto             _c_: Capture     _T_: Today      _C_: Insert Citation
                  _i_: Insert           _r_: Refile      _L_: Tomorrow
                  _f_: Find             _d_: Delete      _Y_: Yesterday
                  _l_: Insert Link                     _F_: Find Date
                  _n_: Header Node
                  "
        ("g" org-roam-node-find)
        ("i" org-roam-node-insert)
        ("f" org-roam-node-find)
        ("l" org-roam-insert-link)
        ("n" org-id-get-create)
        ("c" org-roam-capture)
        ("r" org-roam-refile)
        ("d" org-roam-node-delete)
        ("T" org-roam-dailies-goto-today)
        ("L" org-roam-dailies-goto-tommorow)
        ("Y" org-roam-dailies-goto-yesterday)
        ("F" org-roam-dailies-find-date)
        ("C" org-ref-cite-insert-helm))
      (general-define-key
       :prefix "SPC"
       :states '(motion normal visual)
       :keymaps 'override
       "r" '(my-org-roam-hydra/body :which-key "Org Roam")))


    (setq org-return-follows-link t)

    ;; Install helm if not already installed
    (use-package helm
      :init
      (helm-mode 1)
      :config
      (setq helm-split-window-in-side-p t)
      (setq helm-split-window-default-side 'below)
      (setq helm-truncate-lines t)
      :bind
      (("M-x"     . helm-M-x) ;; Evaluate functions
       ("C-x C-f" . helm-find-files) ;; Open or create files
       ("C-x b"   . helm-mini) ;; Select buffers
       ("C-x C-r" . helm-recentf) ;; Select recently saved files
       ("C-c i"   . helm-imenu) ;; Select document heading
       ("M-y"     . helm-show-kill-ring)) ;; Show the kill ring
      )


    ;; Optional: Set Helm keybindings (if desired)
    (global-set-key (kbd "C-x C-f") 'helm-find-files)
    (global-set-key (kbd "M-x") 'helm-M-x)

#+end_src

+ Org roam dailies
  #+begin_src emacs-lisp :results none
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %<%H:%M> %?\n\n"
           :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n\n** Focus\n *For my ——— what is the _ONE_ Thing I can do hit my goals today, such that by\ndoing it everything else will be easier or unnecessary?*\n\n*** Career\n*** Health\n*** Relationships\n*** Health\n*** Personal Growth\n* GTD\n\n* LOG\n\n* Reflect\n\n"))))
  #+end_src
+ Contacts
  #+begin_src emacs-lisp :results none
    (setq org-roam-capture-templates
          '(
            ("d" "default" plain
             "%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
             :unnarrowed t)
            ("C" "New Contact" plain
             "* %(read-string \"Contact Name:\")\n:PROPERTIES:\n:ID: %(org-id-new)\n:FILETAGS: PERSON %(read-string \"Tags:\")\n:EMAIL: %(read-string \"Email:\")\n:PHONE: %(read-string \"Phone:\")\n:END:\n\n"
             :if-new (file+head "Contacts.org" "#+TITLE: Contacts\n")
             :unnarrowed t)))
  #+end_src
+ Org-Roam-Ui
 #+begin_src emacs-lisp :results none
   (use-package org-roam-ui
     :after org-roam
     :config
     (setq org-roam-ui-sync-theme t
           org-roam-ui-follow t
           org-roam-ui-update-on-save t
           org-roam-ui-open-on-start t))

 #+end_src

** Other Org Modes

+ org drill
#+begin_src emacs-lisp :results none
(use-package org-drill
  :ensure t
  :config
  ;; Enable org-drill when Org mode is loaded
  (with-eval-after-load 'org
    (require 'org-drill))

  ;; Customize org-drill settings
  (setq org-drill-spaced-repetition-algorithm 'sm2
        org-drill-add-random-noise-to-intervals-p t
        org-drill-adjust-intervals-for-early-and-late-repetitions-p t
        org-drill-maximum-items-per-session 30
        org-drill-learn-fraction 0.25
        org-drill-allow-visible-cloze-p t)

  ;; Customize org-drill faces (optional)
  (custom-set-faces
   '(org-drill-cloze-face ((t (:foreground "red" :weight bold))))
   '(org-drill-done-cloze-face ((t (:foreground "green" :weight bold))))))

#+end_src

** Bibliography
+ Org Roam Bibtex (ORB)
  #+begin_src emacs-lisp :results none
    (use-package org-roam-bibtex
      :after org-roam
      :config
      (require 'org-ref)) ; optional: if using Org-ref v2 or v3 citation links
  #+end_src
+ Org Ref
  #+begin_src emacs-lisp :results none
(use-package org-ref)
  #+end_src
+ Citar
  #+begin_src emacs-lisp :results none

  #+end_src

+ Helm-Bibtexo
  #+begin_src emacs-lisp :results none
    (use-package helm-bibtex
      :ensure t
      :config
      (define-key org-mode-map (kbd "C-c c") 'helm-bibtex)
      (setq bibtex-completion-notes-template-multiple-files
             ":PROPERTIES:\n:ID: %(org-id-new)\n:END:\n#+TITLE: ${author-or-editor} (${year}): ${title}\n:FILETAGS: NOTES PAPER\n\n [[/home/simon/Work/.library/pdfs/][PDF]]\n ${file} \n TEST")
      (setq bibtex-completion-bibliography "~/Work/.library/ref.bib"
            bibtex-completion-library-path "~/Work/.library/pdfs"
            bibtex-completion-notes-path "~/.roam"))
    (setq org-cite-follow-processor 'helm-bibtex-org-cite-follow)
    (setq org-cite-global-bibliography '("~/Work/.library/ref.bib"))
  #+end_src
** LaTeX
#+begin_src emacs-lisp :results none
(setq org-latex-to-pdf-process (list "latexmk -pdf %f"))
#+end_src
** Projectile

#+begin_src emacs-lisp :results none
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'helm))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/")
      (setq projectile-project-search-path '("~/Projects/")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Ox
+ Ox hugo
  #+begin_src emacs-lisp :results none
(use-package ox-hugo
  :ensure t   
  :pin melpa  ;`package-archives' 
  :after ox)
  #+end_src

** Mu4E
#+begin_src emacs-lisp :results none
  (use-package mu4e
    :elpaca nil
    :init
    (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
    (require 'mu4e)
    :config
    (setq mu4e-change-filenames-when-moving t)
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-maildir "~/.mail/")
    (setq mu4e-attachment-dir "~/Downloads")
    (setq mu4e-update-interval 300)            ; Update interval (seconds)
    (setq mu4e-index-cleanup t)                ; Cleanup after indexing
    (setq mu4e-index-update-error-warning t)   ; Warnings during update
    (setq mu4e-index-update-in-background t)   ; Background update
    (setq mu4e-change-filenames-when-moving t) ; Needed for mbsync
    (setq mu4e-index-lazy-check nil)           ; Don't be lazy, index everything
    (setq mu4e-completing-read-function 'completing-read)
    (setq mu4e-contexts (list
                         (make-mu4e-context
                          :name "gmail"
                          :match-func (lambda (msg) (when msg
                                                      (string-prefix-p "/gmail" (mu4e-message-field msg :maildir))))
                          :vars `((msmtp-account . "jdm204-personal")
                                  (user-mail-address . "simon.sekavcnik@gmail.com")
                                  (mu4e-trash-folder . "/[Gmail]/Bin")
                                  (mu4e-sent-folder . "/[Gmail]/Sent Mail")
                                  (mu4e-drafts-folder . "/[Gmail]/Drafts")))
                         ))
    (setq
     mu4e-headers-unread-mark '("u" . "️")
     mu4e-headers-attach-mark '("a" . "")
     mu4e-headers-replied-mark '("r" . "")
     mu4e-headers-new-mark '("N" . "⭐")
     mu4e-headers-signed-mark '("S" . "✒️")
     mu4e-headers-trashed-mark '("T" . "❎️")
     mu4e-headers-draft-mark '("d" . "")
     mu4e-headers-flagged-mark '("f" . "🏴")
     mu4e-headers-list-mark '("l" . "️")
     mu4e-headers-seen-mark '("s" . "")
     mu4e-headers-encrypted-mark '("e" . "")))
#+end_src

* GTD (Org Agend)
This section configures my GTD workflow.
We configure work states

The files:
 + [[file:~/.gtd/inbox.org][inbox.org]]
 + [[file:~/.gtd/ticker.org][tickler.org]]
 + [[file:~/.gtd/gtd.org][gtd.org]]
 + [[file:~/.gtd/someday.org][someday.org]]
need to be added manually by executing "C-[" in the respective buffer.

+ Files
#+begin_src emacs-lisp :results none
  (setq org-agenda-files '("~/.gtd/gtd.org"
                         "~/.gtd/inbox.org"
                         "~/.gtd/tickler.org"
                         "~/.gtd/someday.org"))
#+end_src

+ Heading States
#+begin_src emacs-lisp :results none
(setq org-todo-keywords
      '((sequence "INBOX" "NEXT" "FEEDBACK" "VERIFY" "WAITING" "|" "DONE" "CANCELED" "DELEGATED")))
#+end_src

+ Org Capture Templates 
#+begin_src emacs-lisp :results none
  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline "~/.gtd/inbox.org" "Tasks")
                                 "* INBOX %i%?")
                                ("T" "Tickler" entry
                                 (file+headline "~/.gtd/tickler.org" "Tickler")
                                 "* %i%? \n %U")))
#+end_src

+ Refiling
#+begin_src emacs-lisp :results none
  (setq org-refile-targets '(("~/.gtd/gtd.org" :maxlevel . 3)
                             ("~/.gtd/someday.org" :level . 1)
                             ("~/.gtd/tickler.org" :maxlevel . 2)))
#+end_src
 #+begin_src emacs-lisp :results none
   (setq org-agenda-custom-commands
         '(("g" "GTD Agenda"
            ((agenda "" ((org-agenda-span 'day)
                         (org-deadline-warning-days 0)))
             (todo "NEXT"
                   ((org-agenda-overriding-header "Next Actions:")
                    (org-agenda-files '("~/.gtd/gtd.org"))))
             (todo "WAITING"
                   ((org-agenda-overriding-header "Waiting For:")
                    (org-agenda-files '("~/.gtd/gtd.org"))))
             (todo "INBOX"
                   ((org-agenda-overriding-header "Inbox:")
                    (org-agenda-files '("~/.gtd/inbox.org"))))
             (todo "VERIFY"
                   ((org-agenda-overriding-header "To Verify:")
                    (org-agenda-files '("~/.gtd/gtd.org"))))
             (todo "FEEDBACK"
                   ((org-agenda-overriding-header "Feedback Needed:")
                    (org-agenda-files '("~/.gtd/gtd.org"))))))))
 #+end_src
* PROGRAMING
** Yasnipet
#+begin_src emacs-lisp :results none
    (use-package yasnippet
      :ensure t
      :init
      (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
      :config
      (yas-reload-all)
      (yas-global-mode 1)
      (add-hook 'org-mode-hook #'yas-minor-mode))

  #+end_src

** Python
#+begin_src emacs-lisp :results none
    (use-package python-mode
      :mode ("\\.py\\'" . python-mode)
      :interpreter ("python" . python-mode)
      :hook (python-mode . lsp-deferred)
      :config
      (setq python-indent-offset 4))

    ;; Install and configure LSP mode for code completion and linting
    (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :hook 
      (lsp-mode . lsp-enable-which-key-integration)
      :custom
      (lsp-diagnostics-provider :capf)
      (lsp-headerline-breadcrumb-enable t)
      (lsp-headerline-breadcrumb-segments '(project file symbols))
      (lsp-lens-enable nil)
      (lsp-disabled-clients '((python-mode . pyls)))
      :init
      (setq lsp-keymap-prefix "C-c l") ;; Or 'C-l', 's-l'
      :config
      )

      ;; Optional: Install and configure lsp-ui for additional features
    (use-package lsp-ui
      :hook (lsp-mode . lsp-ui-mode)
      :config
      (setq lsp-ui-doc-enable nil) ; Disable the documentation popup
      (setq lsp-ui-sideline-enable t) ; Show symbol information in the sideline
      (setq lsp-ui-sideline-show-hover t))

      ;; Optional: Install and configure flycheck for on-the-fly syntax checking
    (use-package flycheck
      :ensure t
      :hook (lsp-mode . flycheck-mode))

      ;; Optional: Install and configure blacken for automatic code formatting
    (use-package blacken
      :hook (python-mode . blacken-mode))
    (add-hook 'python-mode-hook 'hs-minor-mode)

    (defun my-python-mode-keys ()
      (when (bound-and-true-p evil-local-mode)
        (evil-define-key 'normal python-mode-map (kbd "TAB") 'hs-toggle-hiding)))

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

    (add-hook 'python-mode-hook 'my-python-mode-keys)
  (use-package pyvenv
    :config
    (pyvenv-mode 1))
(use-package elpy
  :ensure t
  :init
  (elpy-enable))
#+end_src

** Rust
#+begin_src emacs-lisp :results none
  ;; Rust mode and dependencies
  (use-package ob-rust)
  (use-package rust-mode
    :mode "\\.rs\\'"
    :config
    ;; Set indentation to 4 spaces
    (setq rust-indent-offset 4)
    ;; Enable auto-formatting on save
    (add-hook 'rust-mode-hook
              (lambda () (add-hook 'before-save-hook 'rust-format-buffer nil t))))
  (add-hook 'rust-mode-hook 'eglot-ensure)

#+end_src

** Docker
+ Dockerfile mode
#+begin_src emacs-lisp :results none
;; Dockerfile mode
(use-package dockerfile-mode
  :ensure t
  :mode ("Dockerfile\\'" . dockerfile-mode))
#+end_src
+ docker-compose mode
#+begin_src emacs-lisp :results none
;; Docker-compose mode
(use-package docker-compose-mode
  :ensure t
  :mode ("docker-compose\\.yml\\'" . docker-compose-mode))

#+end_src
+ Docker mode
#+begin_src emacs-lisp :results none
;; Docker-related settings
(use-package docker
  :ensure t
  :bind ("C-c d" . docker))
#+end_src

** Jenkins
#+begin_src emacs-lisp :results none
  (use-package jenkinsfile-mode
    :ensure t
    :mode (("Jenkinsfile\\'" . jenkinsfile-mode))
    :config
    (setq jenkinsfile-mode-indent-offset 4)
    (add-hook 'jenkinsfile-mode-hook #'yas-minor-mode)
    (add-hook 'jenkinsfile-mode-hook
              (lambda ()
                (setq-local flycheck-command-wrapper-function
                            (lambda (command) (append '("sh") command))))
              ))
#+end_src

** Golang
#+begin_src emacs-lisp :results none
  (use-package go-mode
    :ensure t
    :mode
    ("\\.go\\'" . go-mode)   ; Associate .go files with go-mode
    ("\\.proto\\'" . go-mode) ; Associate .proto files with go-mode
    :hook
    (go-mode . (lambda ()
                 (setq tab-width 2)
                 (setq indent-tabs-mode nil)
                 (add-hook 'before-save-hook 'gofmt-before-save nil t))))

  (use-package company-go
    :ensure t
    :hook
    (go-mode . (lambda ()
                 (set (make-local-variable 'company-backends) '(company-go))
                 (company-mode))))
#+end_src

* CUSTOM BEHAVIOUR
** ORG MODE

*** TUM BEAMER
#+begin_src emacs-lisp :results none
  (eval-after-load "ox-latex"

    ;; update the list of LaTeX classes and associated header (encoding, etc.)
    ;; and structure
    '(add-to-list 'org-latex-classes
                  `("beamer"
                    ,(concat "\\documentclass[presentation]{tumbeamer}\n"
                             "[DEFAULT-PACKAGES]"
                             "[PACKAGES]"
                             "[EXTRA]\n")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
    
#+end_src
